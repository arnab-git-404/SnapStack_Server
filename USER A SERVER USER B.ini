USER A                          SERVER                          USER B
┌─────────┐                  ┌────────┐                      ┌─────────┐
│ Alice   │                  │        │                      │  Bob    │
│ Room:   │                  │Socket  │                      │ Room:   │
│user:111 │                  │  IO    │                      │user:222 │
└─────────┘                  └────────┘                      └─────────┘
    │                            │                               │
    │  1. Emit 'send_message'    │                               │
    │───────────────────────────>│                               │
    │   {content, encrypted}     │                               │
    │                            │  2. Emit 'receive_message'   │
    │                            │   to user:222 room           │
    │                            │──────────────────────────────>│
    │                            │                               │
    │                            │   3. Socket receives message  │
    │                            │   in 'receive_message' event  │
    │                            │       (auto decrypts)          │
    │                            │                               │
    │  4. message_delivered      │                               │
    │   (sent back as receipt)   │                               │
    │<───────────────────────────│                               │
    │                            │   5. User reads message       │
    │                            │   Emits 'message_read'        │
    │                            │<──────────────────────────────│
    │                            │   6. Emit 'message_read'      │
    │                            │   to user:111 room (receipt)  │
    │<───────────────────────────│                               │
    │                            │                               │
```

### 6. **Complete Chat Connection Example**

````javascript
// Frontend: Connect and send message
import io from 'socket.io-client';

const Chat = () => {
  useEffect(() => {
    // 1. Connect to server with token
    const socket = io(API_URL, {
      auth: {
        token: localStorage.getItem('accessToken')
      }
    });

    // 2. Receive partner's public key
    socket.on('partner_key', (data) => {
      setPartnerPublicKey(data.publicKey);
      console.log('Partner key received:', data.publicKey);
    });

    // 3. Receive messages from partner
    socket.on('receive_message', (message) => {
      const decryptedContent = decryptWithPrivateKey(
        message.encryptedContent,
        myPrivateKey
      );
      setMessages(prev => [...prev, {
        ...message,
        content: decryptedContent
      }]);
    });

    // 4. Delivery confirmation
    socket.on('message_delivered', (data) => {
      updateMessageStatus(data.messageId, 'delivered');
    });

    // 5. Read receipt
    socket.on('message_read', (data) => {
      updateMessageStatus(data.messageId, 'read');
    });

    return () => socket.disconnect();
  }, []);

  // Send message
  const sendMessage = (content) => {
    const encryptedContent = encryptWithPublicKey(
      content,
      partnerPublicKey
    );

    socket.emit('send_message', {
      id: uuid(),
      content,
      encryptedContent,
      timestamp: new Date()
    });
  };

  return (
    <div>
      {messages.map(msg => (
        <div key={msg.id}>
          {msg.senderName}: {msg.content}
          <span>{msg.status}</span>
        </div>
      ))}
      <input 
        onChange={(e) => sendMessage(e.target.value)} 
        onKeyPress={(e) => e.key === 'Enter' && sendMessage(e.target.value)}
      />
    </div>
  );
};

export default Chat;